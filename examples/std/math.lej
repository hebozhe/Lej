~This module houses all of the functions that are used to perform common mathematical operations in Lej.~

~Give the sum of all the N-operable numbers in an iterable.~
fun sum is this:
    take itr[N] ns;
    want nat;

    if (len of ns) = 0: give 0; \

    give (ns at 0) + (sum with (ns from 1 to (len of ns)) as ns);
\

~Give the product of all the N-operable numbers in an iterable.~
fun product is this:
    take itr[N] ns;
    want nat;

    if (len of ns) = 0: give 1; \

    give (ns at 0) * (product with (ns from 1 to (len of ns)) as ns);
\

~Give the result of a Q-operable number to an integer exponent.~
fun power is this:
    take Q base, int64 exp;
    want Q;

    if exp < 0: give 1 / (power with base as base and (exp * -1) as exp);

    if exp = 0: give 1; \

    give base * (power with base as base and (exp - 1) as exp);
\
