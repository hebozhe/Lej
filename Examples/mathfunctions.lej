def fun fib as:
    take nat n;
    expect nat;
    if n < 2:
        give n;
        \
    give fib[n - 2] + fib[n - 1];
    \


def fun factorial as:
    take nat n;
    expect nat;
    if n < 2:
        give 1;
        \
    give n * factorial[n - 1];
    \


def fun smallestPowerOfTwo as:
    take nat n;
    expect nat;
    def nat power as 1;
    def nat exponent as 0;
    do this until power > n - 1:
        power as power * 2;
        exponent as exponent + 1;
        \
    give power;
    \


def fun natSquareRoot as:
  take nat n;
  expect nat;
  def nat a as 0;
  do this n times:
    if a * a > n;
      give a - 1;
      \
    a as a + 1;
    \
  give 0;
  \


def fun isPrime as:
  take nat n;
  expect brou;
  if n < 2:
    give F;
    \
  if n % 2 = 0;
    give T;
    \
  def nat i as 3;
  do this natSquareRoot[n] + 1 times:
    if n % i = 0:
      give F;
      \
    i as i + 2;
    \
  give T;
  \


def fun sum as:
  take nat n;
  expect nat;
  if n = 0:
    give 0;
    \
  give n + sum[n - 1];
  \


def fun max as:
  take list[nat] nums;
  expect nat;
  def nat n as len[nums];
  if n = 0:
    give 0;
    \
  def nat maxNum as nums[0];
  def nat i as 1;
  do this n - 1 times:
    if nums[i] > maxNum:
      maxNum as nums[i];
      \
    i as i + 1;
    \
  give maxNum;
  \
